// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests delete an item 1`] = `
Object {
  "data": Object {
    "deleteItem": Object {
      "id": "1",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Tests should error when no item 1`] = `
Object {
  "data": Object {
    "item": null,
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Tests should fetch all items 1`] = `
Object {
  "data": Object {
    "allItems": Array [
      Object {
        "currency": "PHP",
        "deliveryAddress": Object {
          "id": "A1",
        },
        "description": "Beef",
        "id": "1",
        "itemNo": "001",
        "quantity": 10,
        "scheduleLine": Array [
          Object {
            "deliveryDateAndTime": "February 25,2020 4:30PM",
            "deliveryStatus": null,
            "id": "1",
            "quantity": 10,
            "totalAmount": 10000,
            "unitPrice": 1000,
            "uom": "kilograms",
          },
        ],
        "supplierStatusItem": null,
        "totalAmount": 10000,
        "unitPrice": 1000,
        "uom": "kilograms",
      },
      Object {
        "currency": "PHP",
        "deliveryAddress": Object {
          "id": "A1",
        },
        "description": "Beef",
        "id": "2",
        "itemNo": "001",
        "quantity": 10,
        "scheduleLine": Array [
          Object {
            "deliveryDateAndTime": "February 25,2020 4:30PM",
            "deliveryStatus": null,
            "id": "2",
            "quantity": 10,
            "totalAmount": 10000,
            "unitPrice": 1000,
            "uom": "kilograms",
          },
        ],
        "supplierStatusItem": null,
        "totalAmount": 10000,
        "unitPrice": 1000,
        "uom": "kilograms",
      },
    ],
  },
  "errors": Array [
    [GraphQLError: getAllSupplierStatusByScheduleLine is not a function],
    [GraphQLError: getAllSupplierStatusByScheduleLine is not a function],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Tests should fetch one item  1`] = `
Object {
  "data": Object {
    "item": Object {
      "currency": "PHP",
      "deliveryAddress": Object {
        "id": "A1",
      },
      "description": "Beef",
      "id": "1",
      "itemNo": "001",
      "quantity": 10,
      "scheduleLine": Array [
        Object {
          "deliveryDateAndTime": "February 25,2020 4:30PM",
          "deliveryStatus": null,
          "id": "1",
          "quantity": 10,
          "totalAmount": 10000,
          "unitPrice": 1000,
          "uom": "kilograms",
        },
      ],
      "supplierStatusItem": null,
      "totalAmount": 10000,
      "unitPrice": 1000,
      "uom": "kilograms",
    },
  },
  "errors": Array [
    [GraphQLError: getAllSupplierStatusByScheduleLine is not a function],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Tests update an item 1`] = `
Object {
  "data": Object {
    "updateItem": Object {
      "id": "1",
      "supplierStatusItem": "Dispatched",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Tests update an item supplierStatus 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    [ValidationError: Unknown type "UpdateItemSupplierStatusInput". Did you mean "UpdateSupplierStatusInput", "UpdateSupplierStatusItemInput", "UpdateSupplierInput", "SupplierStatusInput", or "UpdateItemInput"?],
    [ValidationError: Cannot query field "updateSupplierItemSupplierStatus" on type "Mutation". Did you mean "updateSupplierStatus", "deleteSupplierStatus", "updateSupplierStatusItem", or "createSupplierStatus"?],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;
